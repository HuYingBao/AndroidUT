apply plugin: 'com.android.application'
apply from: 'jacoco.gradle'

android {
    //编译版本
    compileSdkVersion COMPILE_SDK_VERSION as int
    //lint设置
    lintOptions {
        //lint 不被终止
        abortOnError false
        //打Release版本时,不进行检测
        checkReleaseBuilds false
        //关闭检索的功能
        disable 'GoogleAppIndexingWarning'
    }
    //默认配置
    defaultConfig {
        applicationId "com.zl.weilu.androidut"
        minSdkVersion MIN_SDK_VERSION as int
        targetSdkVersion TARGET_SDK_VERSION as int
        versionCode rootProject.gitGitVersionCode()
        versionName rootProject.getGitVersionName()
    }
    //构建过程
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    //Lambda表达式需要
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    //单元测试,robolectric支持
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

//将源代码打包进aar
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.javaDirectories
}

artifacts {
    archives sourcesJar
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.appcompat:appcompat:${X_APPCOMPAT}"
    //junit
    testImplementation "junit:junit:${TEST_JUNIT}"
    //mockito
    testImplementation "org.mockito:mockito-core:${TEST_MOCKITO}"
    //robolectric
    testImplementation "org.robolectric:robolectric:${TEST_ROBOLECTRIC}"
    //powermock
    testImplementation "org.powermock:powermock-api-mockito2:${TEST_POWERMOCK}"
    testImplementation "org.powermock:powermock-module-junit4:${TEST_POWERMOCK}"
    testImplementation "org.powermock:powermock-module-junit4-rule:${TEST_POWERMOCK}"
    testImplementation "org.powermock:powermock-classloading-xstream:${TEST_POWERMOCK}"
    //daggermock
    testImplementation "com.github.fabioCollini.daggermock:daggermock:${TEST_DEAAGE_MOCK}"

    testImplementation "androidx.test:core:${TEST_X_CORE}"
    testImplementation "androidx.test:rules:${TEST_X_RULES}"
    testImplementation "androidx.test:runner:${TEST_X_RUNNER}"
    testImplementation "androidx.test.ext:junit:${TEST_X_JUNIT}"
    testImplementation "androidx.test.espresso:espresso-core:${TEST_X_ESPRESSO}"
    testImplementation "androidx.fragment:fragment-testing:${TEST_X_FRAGMENT}"
    //RxJava
    implementation "io.reactivex.rxjava2:rxjava:${RX_JAVA_2}"
    //RxAndroid
    implementation "io.reactivex.rxjava2:rxandroid:${RX_ANDROID_2}"
    //okhttp
    implementation "com.squareup.okhttp3:okhttp:${OKHTTP}"
    //mockwebserver
    testImplementation "com.squareup.okhttp3:mockwebserver:${OKHTTP}"
    //Retrofit
    implementation("com.squareup.retrofit2:retrofit:${RETROFIT}") {
        exclude module: 'okhttp'
    }
    implementation("com.squareup.retrofit2:adapter-rxjava2:${RETROFIT}") {
        exclude module: 'rxjava'
    }
    implementation "com.squareup.retrofit2:converter-gson:${RETROFIT}"
    //打印Log
    implementation "com.elvishew:xlog:1.4.0"
    //Dagger
    implementation "com.google.dagger:dagger:${DAGGER}"
    implementation("com.google.dagger:dagger-android:${DAGGER}") {
        exclude module: 'support-annotations'
    }
    implementation("com.google.dagger:dagger-android-support:${DAGGER}") {
        exclude module: 'support-annotations'
        exclude module: 'appcompat-v7'
        exclude module: 'support-v4'
    }
    annotationProcessor "com.google.dagger:dagger-compiler:${DAGGER}"
    annotationProcessor "com.google.dagger:dagger-android-processor:${DAGGER}"

    testImplementation 'com.github.andrzejchm.RESTMock:android:0.3.1'

    testImplementation 'org.assertj:assertj-core:3.10.0'
    testImplementation 'com.squareup.assertj:assertj-android:1.2.0'
}
